---
version: '3.7'
services:
  zookeeper:
    # platform: linux/x86_64
    image: confluentinc/cp-zookeeper:7.1.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    # platform: linux/x86_64
    image: confluentinc/cp-kafka:7.1.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1

#  schema-registry:
#    # platform: linux/x86_64
#    image: confluentinc/cp-schema-registry:7.1.1
#    hostname: schema-registry
#    container_name: schema-registry
#    depends_on:
#      - zookeeper
#      - broker
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'

  connect:
    image: confluentinc/kafka-connect-datagen:0.5.3
    build:
      context: .
      dockerfile: Dockerfile-datagen
    container_name: connect
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      - zookeeper
      - broker
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:29092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"

  minio:
    image: quay.io/minio/minio:latest
    command: server /data --console-address ":9001"
    hostname: minio
    container_name: minio
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - "/tmp/data:/data"
    environment:
      MINIO_ROOT_USER: AKIAIOSFODNN7EXAMPLE
      MINIO_ROOT_PASSWORD: wJalrXUtnFEMIbPxRfiCYEXAMPLEKEY
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  consumer:
    image: consumer:latest
    build:
      context: .
      dockerfile: Dockerfile-consumer
    hostname: consumer
    container_name: consumer
    environment:
      BOOTSTRAP_SERVERS: "broker:29092"
      USERNAME: kafkabroker
      PASSWORD: test123
      TOPIC: transactions
      MINIO_HOST: "http://minio:9000"
      MINIO_USERNAME: AKIAIOSFODNN7EXAMPLE
      MINIO_PASSWORD: wJalrXUtnFEMIbPxRfiCYEXAMPLEKEY
      MINIO_BUCKET: testbucket

  akhq:
      image: tchiotludo/akhq
      environment:
        AKHQ_CONFIGURATION: |
          akhq:
            connections:
              docker-kafka-server:
                properties:
                  bootstrap.servers: "broker:29092"
                schema-registry:
                  url: "http://schema-registry:8081"
                connect:
                  - name: "connect"
                    url: "http://connect:8083"
      ports:
        - 8080:8080
      depends_on:
        - broker
#        - schema-registry
        - connect
